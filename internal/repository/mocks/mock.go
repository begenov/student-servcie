// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	domain "github.com/begenov/student-service/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockStudents is a mock of Students interface.
type MockStudents struct {
	ctrl     *gomock.Controller
	recorder *MockStudentsMockRecorder
}

// MockStudentsMockRecorder is the mock recorder for MockStudents.
type MockStudentsMockRecorder struct {
	mock *MockStudents
}

// NewMockStudents creates a new mock instance.
func NewMockStudents(ctrl *gomock.Controller) *MockStudents {
	mock := &MockStudents{ctrl: ctrl}
	mock.recorder = &MockStudentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudents) EXPECT() *MockStudentsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStudents) Create(ctx context.Context, student domain.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStudentsMockRecorder) Create(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStudents)(nil).Create), ctx, student)
}

// Delete mocks base method.
func (m *MockStudents) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentsMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudents)(nil).Delete), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockStudents) GetByEmail(ctx context.Context, email string) (domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockStudentsMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockStudents)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockStudents) GetByID(ctx context.Context, id int) (domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStudentsMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStudents)(nil).GetByID), ctx, id)
}

// GetByRefresh mocks base method.
func (m *MockStudents) GetByRefresh(ctx context.Context, refreshToken string) (domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefresh", ctx, refreshToken)
	ret0, _ := ret[0].(domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefresh indicates an expected call of GetByRefresh.
func (mr *MockStudentsMockRecorder) GetByRefresh(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefresh", reflect.TypeOf((*MockStudents)(nil).GetByRefresh), ctx, refreshToken)
}

// GetStudentsByCoursesID mocks base method.
func (m *MockStudents) GetStudentsByCoursesID(ctx context.Context, coursesID string) ([]domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentsByCoursesID", ctx, coursesID)
	ret0, _ := ret[0].([]domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentsByCoursesID indicates an expected call of GetStudentsByCoursesID.
func (mr *MockStudentsMockRecorder) GetStudentsByCoursesID(ctx, coursesID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentsByCoursesID", reflect.TypeOf((*MockStudents)(nil).GetStudentsByCoursesID), ctx, coursesID)
}

// SetSession mocks base method.
func (m *MockStudents) SetSession(ctx context.Context, session domain.Session, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", ctx, session, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockStudentsMockRecorder) SetSession(ctx, session, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockStudents)(nil).SetSession), ctx, session, id)
}

// Update mocks base method.
func (m *MockStudents) Update(ctx context.Context, student domain.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStudentsMockRecorder) Update(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudents)(nil).Update), ctx, student)
}
