// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	domain "github.com/begenov/student-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStudents is a mock of Students interface.
type MockStudents struct {
	ctrl     *gomock.Controller
	recorder *MockStudentsMockRecorder
}

// MockStudentsMockRecorder is the mock recorder for MockStudents.
type MockStudentsMockRecorder struct {
	mock *MockStudents
}

// NewMockStudents creates a new mock instance.
func NewMockStudents(ctrl *gomock.Controller) *MockStudents {
	mock := &MockStudents{ctrl: ctrl}
	mock.recorder = &MockStudentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudents) EXPECT() *MockStudentsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStudents) Create(ctx context.Context, student domain.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStudentsMockRecorder) Create(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStudents)(nil).Create), ctx, student)
}

// Delete mocks base method.
func (m *MockStudents) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentsMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudents)(nil).Delete), ctx, id)
}

// GetStudentByID mocks base method.
func (m *MockStudents) GetStudentByID(ctx context.Context, id int) (domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByID", ctx, id)
	ret0, _ := ret[0].(domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByID indicates an expected call of GetStudentByID.
func (mr *MockStudentsMockRecorder) GetStudentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByID", reflect.TypeOf((*MockStudents)(nil).GetStudentByID), ctx, id)
}

// GetStudentsByCoursesID mocks base method.
func (m *MockStudents) GetStudentsByCoursesID(ctx context.Context, id string) ([]domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentsByCoursesID", ctx, id)
	ret0, _ := ret[0].([]domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentsByCoursesID indicates an expected call of GetStudentsByCoursesID.
func (mr *MockStudentsMockRecorder) GetStudentsByCoursesID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentsByCoursesID", reflect.TypeOf((*MockStudents)(nil).GetStudentsByCoursesID), ctx, id)
}

// Update mocks base method.
func (m *MockStudents) Update(ctx context.Context, student domain.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStudentsMockRecorder) Update(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudents)(nil).Update), ctx, student)
}

// MockAdmins is a mock of Admins interface.
type MockAdmins struct {
	ctrl     *gomock.Controller
	recorder *MockAdminsMockRecorder
}

// MockAdminsMockRecorder is the mock recorder for MockAdmins.
type MockAdminsMockRecorder struct {
	mock *MockAdmins
}

// NewMockAdmins creates a new mock instance.
func NewMockAdmins(ctrl *gomock.Controller) *MockAdmins {
	mock := &MockAdmins{ctrl: ctrl}
	mock.recorder = &MockAdminsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmins) EXPECT() *MockAdminsMockRecorder {
	return m.recorder
}

// GetByRefreshToken mocks base method.
func (m *MockAdmins) GetByRefreshToken(ctx context.Context, refreshToken string) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefreshToken indicates an expected call of GetByRefreshToken.
func (mr *MockAdminsMockRecorder) GetByRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefreshToken", reflect.TypeOf((*MockAdmins)(nil).GetByRefreshToken), ctx, refreshToken)
}

// SignIn mocks base method.
func (m *MockAdmins) SignIn(ctx context.Context, email, password string) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, email, password)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAdminsMockRecorder) SignIn(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAdmins)(nil).SignIn), ctx, email, password)
}

// SignUp mocks base method.
func (m *MockAdmins) SignUp(ctx context.Context, admin domain.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAdminsMockRecorder) SignUp(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAdmins)(nil).SignUp), ctx, admin)
}
